AWSTemplateFormatVersion: "2010-09-09"

Description:
  Amazon ECS Application bootstrapping with SSM Parameter Store

Mappings:
  VpcCidrs:
      default:
        vpc: 10.0.0.0/16
        pubzonea: 10.0.1.0/24
        pubzoneb: 10.0.2.0/24

  InstanceType:
    default:
      web: m3.medium

Parameters:
  SshKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.

  InstancePurchaseOption: 
    Type: String
    AllowedValues: ["spot", "on-demand"]
    Default: spot
    Description: spot or on-demand EC2 instance(s)
  # SpotPrice:
  #   Type: Number
  #   Description: spot price for spot instances
  #   Default: 0.02
  # ASGDesiredCapacity:
  #   Type: Number
  #   Description: instance count under AutoScalingGroup
  #   Default: 2
  # ASGMaxSize:
  #   Type: Number
  #   Description: max instance count under AutoScalingGroup
  #   Default: 4
  # ASGMinSize:
  #   Type: Number
  #   Description: min instance count under AutoScalingGroup
  #   Default: 0
  # UseALB:
  #   Type: String
  #   AllowedValues: ["yes", "no"]
  #   Description: select yes if you'd like to use ALB
  #   Default: "yes"
  AppName:
    Type: String
    Description: select your ECS App Name
    Default: Caddy
  # Tag:
  #   Type: String
  #   Description: placeholder for Docker image tag generated by CodeBuild
  #   Default: ""
  # CanaryTag:
  #   Type: String
  #   Description: placeholder for Docker image tag generated by CodeBuild for canary deployment
  #   Default: ""
  # Cluster:
  #   Type: String
  #   Description: ECS Cluster
  #   Default: default
  # MaxPercent:
  #   Type: Number
  #   Default: 100
  # MinPercent:
  #   Type: Number
  #   Default: 50
  # ServiceDesiredCount:
  #   Type: Number
  #   Default: 1
  # IsWithCanary:
  #   Type: Number
  #   Default: 0
  # CanaryDesiredCount:
  #   Type: Number
  #   Default: 0
  #   Description: desired count of ecs task for canary deployment  
  # UseBuiltInTaskDefinition:
  #   Type: String
  #   Default: "yes"
  #   Description: "select yes if you run this template standalone"
  #   AllowedValues:
  #     - "yes"
  #     - "no"
  # AutoscalingGroupOrSpotFleet:
  #   Type: String
  #   Default: "AutoscalingGroup"
  #   Description: "provision the ECS cluster with AutoscalingGroup or SpotFleet"
  #   AllowedValues:
  #     - "AutoscalingGroup"
  #     - "SpotFleet"
  # S3BucketName:
  #   Type: String
  #   Description: >
  #     OPTIONAL - Specifies the name of your AWS account S3 bucket in which the index.zip file is stored. index.zip contains the Python Lambda code index.py; Please download this from https://github.com/pahud/ecs-cfn-refarch/blob/master/lambdaFunctions/ecs_container_draining and upload to your S3 bucket.
  #   Default: ""
  # ParameterStoreYourName:
  #   Type: String
  #   Default: "EmptyName"
  #   Description: >
  #     OPTIONAL - parameter string stored in EC2 Parameter Store


# Conditions:
  # HasSshKeyName: !Not [ !Equals [!Ref SshKeyName, NoValue] ]
  #SpotOnlyCond: !Not [ !Equals [ !Ref SpotPrice, 0 ] ]
  # SpotOnlyCond: !Equals [!Ref InstancePurchaseOption, "spot"]
  # HasSMSCond: !Not [ !Equals [ !Ref SNSMobileNumber, ""]]
  # UseALBCond: !Equals [ !Ref UseALB, "yes" ] 
  # UseELBCond: !Equals [ !Ref UseALB, "no" ] 
  # UseBuiltInTaskDefinitionCond: !Equals [ !Ref UseBuiltInTaskDefinition, "yes" ]
  # EnableASGCond: !Equals [ !Ref AutoscalingGroupOrSpotFleet, "AutoscalingGroup" ]
  # DisableASGCond: !Equals [ !Ref AutoscalingGroupOrSpotFleet, "SpotFleet" ]
  # SpotFleetCond: !Equals [ !Ref AutoscalingGroupOrSpotFleet, "SpotFleet" ]
  # ECSLambdaDrainCond: !Not [ !Equals [ !Ref S3BucketName, "" ] ]
  # EmptyCanaryTag: !Equals [ !Ref CanaryTag, "" ]
  # EmptyTag: !Equals [ !Ref Tag, "" ]
  # NotEmptyTag: !Not [ !Equals [ !Ref Tag, "" ] ]


Resources:
###################
# EC2 Parameter Store
###################
  # ParameterYourName:
  #   Type: "AWS::SSM::Parameter"
  #   Properties: 
  #     Name: !Sub "ECSYourName-${AWS::StackName}"
  #     Description: "Your Name saved in EC2 Parameter Store"
  #     Type: String
  #     Value: !Ref ParameterStoreYourName


  AMIInfoStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3-us-west-2.amazonaws.com/pahud-cfn-us-west-2/ecs-cfn-refarch/cloudformation/AMIInfo.yml
      TimeoutInMinutes: 5



  ECSTaskInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >-

          import json, boto3

          import cfnresponse

          from botocore.vendored import requests

          session = boto3.session.Session()

          ecsClient = session.client(service_name='ecs')

          def getImageTagFromTaskArn(taskDefArn):
              resp = ecsClient.describe_task_definition(
                  taskDefinition=taskDefArn
              )
              image = resp["taskDefinition"]["containerDefinitions"][0]["image"]
              tag = image.split(":")[-1]
              print(image,tag)
              return (image,tag)          

          def getImageTag(serviceName, clusterName):
              resp = ecsClient.describe_services(
                  cluster=clusterName,
                  services=[ serviceName ]
              )
              if len(resp["services"])>0:
                  return getImageTagFromTaskArn(resp["services"][0]["taskDefinition"])
                  # image = resp["services"][0]["taskDefinition"]
                  # tag = image.split(":")[-1]
                  # print(image,tag)
                  # return (image,tag)
              else:
                  print('got no service')
                  return("","")

          def lambda_handler(event, context):
              print(event)
              ResponseURL = event["ResponseURL"]
              Properties = event["ResourceProperties"]
              Region = Properties["Region"]
              Cluster = Properties["Cluster"]
              Service = Properties["ECSServiceName"]
              # TaskDefArn = Properties["TaskDefArn"]
              (image, tag) = getImageTag(Service, Cluster)
              respBody = {}
              respBody["Status"] = "SUCCESS"
              # respBody["Reason"] = "See the details in CloudWatch Log Stream: %s" % context["logStreamName"]
              # respBody["PhysicalResourceId"] = context["logStreamName"]
              respBody["StackId"] = event["StackId"]
              respBody["RequestId"] = event["RequestId"]
              respBody["LogicalResourceId"] = event["LogicalResourceId"]
              respBody["Data"] = {"Image": image, "Tag": tag}
              print(json.dumps(respBody))
              cfnresp = cfnresponse.send(event, context, cfnresponse.SUCCESS, respBody["Data"], "CustomResourcePhysicalID")
              print(cfnresp)
              
              # respPut = requests.put(ResponseURL, respBody)
              # print(respPut)
              # print(respPut.content)
              return "OK"

      Handler: "index.lambda_handler"
      Runtime: python3.6
      Description: "Query the latest ECS Task Definition"
      Timeout: 300
      Role: !GetAtt AMIInfoStack.Outputs.LambdaExecutionRoleArn
      Tags:
        - Key: custom:cloudformation:purpose
          Value: ECSTaskInfo          


  # LambdaAsgECSDraining:
  #   Condition: ECSLambdaDrainCond
  #   Type: "AWS::Lambda::Function"
  #   Properties:
  #     Code:
  #       S3Bucket: !Ref S3BucketName
  #       S3Key: "index.zip"
  #     Description: Handling the ECS container draining and Autoscaling Group scale in with Lifecycle hooks
  #     Handler: "index.lambda_handler"
  #     Role:
  #         Fn::GetAtt:
  #           - "SNSLambdaExecutionRole"
  #           - "Arn"
  #     Runtime: "python3.6"
  #     Timeout: "300"

  # LambdaInvokePermission:
  #   # Condition: ECSLambdaDrainCond
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #      FunctionName: !Ref LambdaAsgECSDraining
  #      Action: lambda:InvokeFunction
  #      Principal: "sns.amazonaws.com"
  #      SourceArn: !Ref ASGSNSTopic



  ECSTaskInfo:
    Type: Custom::ECSTaskInfo
    Properties:
      ServiceToken: !GetAtt ECSTaskInfoFunction.Arn
      Region: !Ref AWS::Region
      Cluster: !Sub "${AWS::StackName}-ecs-cluster"
      # TaskDefArn: !Ref ECSCaddyTD
      ECSServiceName: !Sub "${AWS::StackName}-${AppName}"


#######################
# CloudWatch Log Group
#######################
  myLogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/${AppName}-${AWS::StackName}
      RetentionInDays: 7
  myAwsLogsLogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/${AppName}-awslogs-${AWS::StackName}
      RetentionInDays: 7
  ecsAgentLogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/${AppName}-ecs-agent-${AWS::StackName}
      RetentionInDays: 7

  PHP7LogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/${AWS::StackName}/var/log/php7
      RetentionInDays: 7




#######################
#   KMS
#######################

  myKey: 
    Type: "AWS::KMS::Key"
    Properties: 
      Description: "key or EC2 Parameter Store"
      KeyPolicy: 
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement: 
          - 
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal: 
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          - 
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal: 
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"

  myEcsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/myEcsKeyAlias-${AWS::StackName}"
      TargetKeyId:
        Ref: myKey

#######################
#   IAM
#######################

  ECSServiceRoleForEC2:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
        Path: /
        ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'    
        Policies:
        - PolicyName: ecs-instance-create-tag
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateTags
              Resource: "*"
        - PolicyName: ecs-instance-awslogs
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "logs:DescribeLogStreams"
              Resource: "arn:aws:logs:*:*:*"

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ecs.amazonaws.com
        Path: /
        ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'   


  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ecs-tasks.amazonaws.com
        Path: /
        Policies:
        - PolicyName: ecs-task-get-parameters
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ECS*"
            - Effect: Allow
              Action:
              - ssm:GetParametersByPath
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/demo*"              
        - PolicyName: ecs-task-decrypt-kms
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - kms:Decrypt
              Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${myKey}"
        - PolicyName: ecs-task-put-cwl
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "arn:aws:logs:*:*:*"

  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - application-autoscaling.amazonaws.com
        Path: /
        Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - application-autoscaling:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
              Resource: "*"
  

  SNSLambdaExecutionRole:
    # FOR ECS draining
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        -
          PolicyName: "lambda-inline"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                - autoscaling:CompleteLifecycleAction
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:DescribeInstances
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeInstanceStatus
                - ec2:DescribeTags
                - ec2:DescribeHosts
                - ecs:ListContainerInstances
                - ecs:SubmitContainerStateChange
                - ecs:SubmitTaskStateChange
                - ecs:DescribeContainerInstances
                - ecs:UpdateContainerInstancesState
                - ecs:ListTasks
                - ecs:DescribeTasks
                - sns:Publish
                - sns:ListSubscriptions
                - lambda:InvokeFunction
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"


  IAMFleetRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - spotfleet.amazonaws.com
        Path: /
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole   

  SNSLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"


#######################
#   VPC / infra
#######################
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      Tags: 
        -
          Key: Name
          Value: cfn-vpc
      CidrBlock: !FindInMap [ VpcCidrs, default, vpc ]
      EnableDnsSupport: true
      EnableDnsHostnames: true

  VPCGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    #Properties:

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        -
          Key: Name
          Value: public-rt
      VpcId: !Ref Vpc

  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicZoneA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        -
          Key: Name
          Value: pub-zone-a
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ VpcCidrs, default, pubzonea ]
      AvailabilityZone: 
        Fn::Select:
          - 0 
          - Fn::GetAZs: ""

  PublicZoneB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        -
          Key: Name
          Value: pub-zone-b
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ VpcCidrs, default, pubzoneb ]
      AvailabilityZone: 
        Fn::Select:
          - 1 
          - Fn::GetAZs: ""


  PublicZoneARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicZoneA

  PublicZoneBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicZoneB




#######################
#  ASG / EC2 / ELB / ALB
#######################

  SgLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "sg for LoadBalancer"
      GroupDescription: "sg for LoadBalancer"
      VpcId: !Ref Vpc
  SgEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "sg for ec2"
      GroupDescription: "sg for ec2"
      VpcId: !Ref Vpc

  ingressSgLB1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SgLB
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  ingressSgLB2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SgLB
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  # ingressSgLB3:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref SgLB
  #     IpProtocol: tcp
  #     FromPort: 8080
  #     ToPort: 8080
  #     CidrIp: !FindInMap [ VpcCidrs, default, vpc ]

  ingress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SgEC2
      SourceSecurityGroupId: !Ref SgLB
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      #CidrIp: 10.0.0.0/16


#######################
#   ALB
#######################   

  publicALB:
    # Condition: UseALBCond
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:

      Name: !Sub
        - ${StackName}-alb
        -
          StackName: !Ref AWS::StackName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SgLB
      Subnets:
        - !Ref PublicZoneA
        - !Ref PublicZoneB
      Tags:
        -
          Key: Name
          Value: !Sub
            - ${StackName}-alb
            - StackName: !Ref AWS::StackName

  ALBListener:
    # Condition: UseALBCond
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref publicALBTargetGroup
      LoadBalancerArn: !Ref publicALB
      Port: 80
      Protocol: HTTP

  publicALBTargetGroup:
    # Condition: UseALBCond
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub
        - ${StackName}-http-tg
        - StackName: !Ref AWS::StackName
      Port: 80
      Protocol: HTTP
      Tags:
        - 
          Key: Name
          Value: alb-tg        
      UnhealthyThresholdCount: 3
      VpcId: !Ref Vpc

 
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: /
      Roles:
        - !Ref ECSServiceRoleForEC2

  SpotFleetInstanceProfile:
    # Condition: SpotFleetCond
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: /
      Roles:
        - !Ref IAMFleetRole

  ASGLC:
    # Condition: EnableASGCond
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !GetAtt AMIInfoStack.Outputs.AmiId
      # ImageId: !ImportValue !Sub "${AMIStackName}-AMIInfoId"
      
      InstanceMonitoring: true
      InstanceType:
        !FindInMap
          - InstanceType
          - default
          - web
      KeyName: !Ref SshKeyName
        # !If 
        #   - HasSshKeyName
        #   - !Ref SshKeyName
        #   - !Ref AWS::NoValue
      SecurityGroups:
        - !Ref SgEC2
      SpotPrice: 0.2
        # !If 
        #   - SpotOnlyCond
        #   - !Ref SpotPrice
        #   - !Ref AWS::NoValue
      UserData: 
        "Fn::Base64": 
          !Sub |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0

            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash
            echo ECS_CLUSTER=${AWS::StackName}-ecs-cluster >> /etc/ecs/ecs.config
            echo ECS_DISABLE_IMAGE_CLEANUP=false >> /etc/ecs/ecs.config
            echo ECS_INSTANCE_ATTRIBUTES='{"instance-purchase-option":"${InstancePurchaseOption}"}' >> /etc/ecs/ecs.config
            yum update -y
            # Install awslogs and the jq JSON parser
            yum install -y awslogs jq aws-cfn-bootstrap

            # Inject the CloudWatch Logs configuration file contents
            cat > /etc/awslogs/awslogs.conf <<- EOF
            [general]
            state_file = /var/lib/awslogs/agent-state        
            
            [/var/log/dmesg]
            file = /var/log/dmesg
            log_group_name = /aws/ECS/var/log/dmesg
            log_stream_name = {cluster}/{container_instance_id}

            [/var/log/messages]
            file = /var/log/messages
            log_group_name = /aws/ECS/var/log/messages
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %b %d %H:%M:%S

            [/var/log/docker]
            file = /var/log/docker
            log_group_name = /aws/ECS/var/log/docker
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%S.%f

            [/var/log/ecs/ecs-init.log]
            file = /var/log/ecs/ecs-init.log.*
            log_group_name = /aws/ECS/var/log/ecs/ecs-init.log
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%SZ

            [/var/log/ecs/ecs-agent.log]
            file = /var/log/ecs/ecs-agent.log.*
            log_group_name = /aws/ECS/var/log/ecs/ecs-agent.log
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%SZ

            [/var/log/ecs/audit.log]
            file = /var/log/ecs/audit.log.*
            log_group_name = /aws/ECS/var/log/ecs/audit.log
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%SZ

            EOF

            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash
            # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
            region=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
            sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

            start ecs
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ASGDefault --region ${AWS::Region} 

            --==BOUNDARY==
            Content-Type: text/upstart-job; charset="us-ascii"

            #upstart-job
            description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
            author "Amazon Web Services"
            start on started ecs

            script
              exec 2>>/var/log/ecs/cloudwatch-logs-start.log
              set -x
              
              until curl -s http://localhost:51678/v1/metadata
              do
                sleep 1	
              done

              # Grab the cluster and container instance ARN from instance metadata
              cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
              container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )
              
              # Replace the cluster name and container instance ID placeholders with the actual values
              sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
              sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf
              
              service awslogs start
              chkconfig awslogs on
            end script
            --==BOUNDARY==--




###################
# ASG
###################

  ASGDefault:
    # Condition: EnableASGCond
    Type: "AWS::AutoScaling::AutoScalingGroup"
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT15M
    # UpdatePolicy:
    #   AutoScalingRollingUpdate:
    #     MinInstancesInService: 0
    #     MaxBatchSize: 1
    #     PauseTime: PT15M
    #     WaitOnResourceSignals: true
    Properties:
      AvailabilityZones:
        -
          Fn::Select:
            - 0 
            - Fn::GetAZs: ""
        -
          Fn::Select:
            - 1
            - Fn::GetAZs: ""
      #Cooldown: String
      HealthCheckGracePeriod: 60
      # HealthCheckType: String
      #InstanceId: String
      LaunchConfigurationName: !Ref ASGLC
      #LoadBalancerNames:
      #  - 
      MetricsCollection:
        - Granularity: 1Minute
      MaxSize: 4
      MinSize: 0
      DesiredCapacity: 1
      NotificationConfigurations:
        # - !If  
        #   - ECSLambdaDrainCond
        #   - TopicARN: !Ref ASGSNSTopic
        #     NotificationTypes:
        #     - autoscaling:EC2_INSTANCE_LAUNCH
        #     - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        #     - autoscaling:EC2_INSTANCE_TERMINATE
        #     - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
          - TopicARN: !Ref EmptySNSTopic
            NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      # PlacementGroup: String
      Tags:
        - 
          Key: Name
          #Value: {"Fn::Sub" : "${StackName}-cfn-nginx"}
          Value: !Sub
            - "${StackName}-ecs-instance"
            - StackName: !Ref AWS::StackName
          PropagateAtLaunch: true
        - 
          Key: ECS_CLUSTER
          Value: !Sub ${AWS::StackName}-ecs-cluster
          PropagateAtLaunch: true

      # TargetGroupARNs:
      #   !If 
      #     - UseALBCond
      #     - [ !Ref publicALBTargetGroup ]
      #     - !Ref AWS::NoValue
      VPCZoneIdentifier:
        - !Ref PublicZoneA
        - !Ref PublicZoneB

  ECSDefaultCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub ${AWS::StackName}-ecs-cluster

  ECSCaddyTD:
      Type: AWS::ECS::TaskDefinition
      Properties: 
        Volumes:
          -
            Name: empty
        TaskRoleArn: !GetAtt ECSTaskRole.Arn
        Family: !Sub ${AppName}-${ECSDefaultCluster}
        PlacementConstraints: 
          - 
            Type: memberOf
            Expression: !Sub "attribute:instance-purchase-option == ${InstancePurchaseOption}"
        ContainerDefinitions: 
          - 
            Name: Caddy
            #Image: "abiosoft/caddy:php"
            # Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
            Image: "pahud/caddy:ecs-parameter-store"
            Cpu: "512"
            PortMappings: 
              - 
                ContainerPort: 2015
                HostPort: 0
            Memory: "1024"
            Ulimits:
              - Name: nofile
                HardLimit: "10240"
                SoftLimit: "10240"
            Essential: "true"
            Environment: 
              -
                Name: AWS_DEFAULT_REGION
                Value: !Ref AWS::Region
              -
                Name: MY_SERVICE_ENV
                Value: prod
              -
                Name: foo
                Value: bar
            MountPoints:
              -
                ContainerPath: /var/log
                SourceVolume: empty
                ReadOnly: false
            LogConfiguration:
              LogDriver: "awslogs"
              Options:
                awslogs-region: !Ref AWS::Region
                awslogs-group: !Sub /aws/ECS/${AppName}-${AWS::StackName}
                awslogs-stream-prefix: !Ref AppName
          - 
            Name: awslogs
            Image: "pahud/awslogs:caddy"
            Cpu: "128"
            Memory: "128"
            Ulimits:
              - Name: nofile
                HardLimit: "10240"
                SoftLimit: "10240"
            Essential: "true"
            MountPoints:
              -
                ContainerPath: /var/log/caddy
                SourceVolume: empty
                ReadOnly: false
            LogConfiguration:
              LogDriver: "awslogs"
              Options:
                awslogs-region: !Ref AWS::Region
                awslogs-group: !Sub /aws/ECS/${AppName}-awslogs-${AWS::StackName}
                awslogs-stream-prefix: !Ref AppName


  ECSService:
    DependsOn: [publicALB, publicALBTargetGroup, ALBListener]
    Type: "AWS::ECS::Service"
    Properties: 
      Cluster: !Ref ECSDefaultCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LoadBalancers: 
          - ContainerName: !Ref AppName
            ContainerPort: 2015
            TargetGroupArn: !Ref publicALBTargetGroup
      Role: !Ref ECSServiceRole
      #TaskDefinition: !Ref ECSWebTD
      TaskDefinition: !Ref ECSCaddyTD
      ServiceName: !Sub "${AWS::StackName}-${AppName}"
      PlacementStrategies: 
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: spread
          Field: host


  ECSscalableTarget:
    DependsOn: ECSService
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: 
        Fn::Join:
          - ""
          -
            - "service/"
            - !Ref ECSDefaultCluster
            - "/"
            - !GetAtt ECSService.Name
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

######################
# scale ECS service when too many ALB 5XX error
######################
  ECSscalingPolicy01:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[+]TooManyALB5XX"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        # AdjustmentType: ExactCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200
        MinAdjustmentMagnitude: 2      

######################
# scale ECS service when service CPUUtilization increases/decrease
######################
  ECSscalingPolicyCpuUtil01:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[+]ServiceCPUUtilHigh"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200
        MinAdjustmentMagnitude: 2          

  ECSscalingPolicyCpuUtil02:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[-]ServiceCPUUtilLow"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -50  
        MinAdjustmentMagnitude: 2      


######################
# scale ECS service when service MemoryUtilization increases/decrease
######################
  ECSscalingPolicyMemUtil01:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[+]ServiceMEMUtilHigh"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200
        MinAdjustmentMagnitude: 2          

  ECSscalingPolicyMemUtil02:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[-]ServiceMEMUtilLow"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -50  
        MinAdjustmentMagnitude: 2    


######################
# Scaling Policies for Autoscaling Group
######################          
  ASGscalingPolicy01:
    # Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 100        
  ASGscalingPolicy02:
    # Condition: EnableASGCond         
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 200  

  ASGscalingPolicy03:
    # Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 200  

  ASGscalingPolicy04:
    # Condition: EnableASGCond        
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: SimpleScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      ScalingAdjustment: -30
      # StepAdjustments:   
      #   - MetricIntervalLowerBound: 0
      #     # MetricIntervalUpperBound: 60
      #     ScalingAdjustment: -30

  ASGscalingPolicy05:
    # Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: SimpleScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      ScalingAdjustment: -30 
      # StepAdjustments:   
      #   - MetricIntervalLowerBound: 0
      #     # MetricIntervalUpperBound: 60
      #     ScalingAdjustment: -30

######################
# Alarm to Scale ASG
######################
  ASGCPUHighAlarmScaleOut:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ASG average CPU Utilization is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy01]
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ASGDefault
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ECSClusterCPURsvHighScaleOut:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: Alarm if our ECS Cluster CPUReservation is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy02]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUReservation

  ECSClusterMemRsvHighScaleOut:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ECS Cluster MemoryReservation is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy03]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: MemoryReservation


  ECSClusterCPURsvLowScaleIn:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '20'
      Statistic: Average
      Threshold: '20'
      AlarmDescription: Alarm if our ECS Cluster CPUReservation is low
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy04]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: CPUReservation

  ECSClusterMemRsvLowScaleIn:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '20'
      Statistic: Average
      Threshold: '20'
      AlarmDescription: Alarm if our ECS Cluster MemoryReservation is low
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy05]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: MemoryReservation



######################
#  CWE 
######################

  ECSEventsRule:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "all ECS events"
      EventPattern:
        source: 
          - aws.ecs
        detail-type:
          - "ECS Task State Change"
          - "ECS Container Instance State Change"
        detail:
          clusterArn: 
            - !Ref ECSDefaultCluster
      Name: !Sub "ECS-Events-${AWS::StackName}"
      # RoleArn: String
      # ScheduleExpression: String
      # State: String
      Targets:
        - Arn: !Ref ECSEventsSNSTopic
          Id: !Sub "ECS-Events-SNS-${AWS::StackName}"


######################
# SNS
######################
  ECSEventsSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub "ECS-Events-${AWS::StackName}"
      # Subscription:
      #   SNS Subscription
      TopicName: !Sub "ECS-Events-${AWS::StackName}"

  # ASGSNSTopic:
  #   Condition: ECSLambdaDrainCond
  #   Type: "AWS::SNS::Topic"
  #   Properties:
  #     Subscription:
  #       -
  #         Endpoint:
  #           Fn::GetAtt:
  #               - "LambdaAsgECSDraining"
  #               - "Arn"
  #         Protocol: "lambda"
  #   DependsOn: LambdaAsgECSDraining




  # for placeholder
  EmptySNSTopic:
    Type: "AWS::SNS::Topic"

######################
# Parameter Store
######################
  MyParametersALBDNSName:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Sub "/demo/prod/${AWS::Region}/ALB-DNSName"
      Description: String
      Type: String
      Value: !GetAtt publicALB.DNSName
  MyParametersSNSTopicArn:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Sub "/demo/prod/${AWS::Region}/SNS-Arn"
      Description: String
      Type: String
      Value: !Ref EmptySNSTopic

######################
# Outputs
######################
Outputs:
  StackName:
    Value:
      !Ref AWS::StackName
  AZs:
    Value:
      Fn::Join:
        - ""
        - !GetAZs ""
  VpcId:
    Value:
      !Ref Vpc
    Description: The VPC ID of the created VPC  
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-VpcId
          - StackName: !Ref AWS::StackName
  LoadBalancerURL:
    Value:
      !Sub
        - 'http://${LBDNS}/output.json'
        -
          LBDNS: !GetAtt publicALB.DNSName

  PHPErrorURL:
    Value:
      !Sub
        - 'http://${LBDNS}/error.php'
        -
          LBDNS: !GetAtt publicALB.DNSName

  SNSTopic:
    Value: !GetAtt ECSEventsSNSTopic.TopicName

  ECSServiceName: 
    Value: !GetAtt ECSService.Name

  ECSTaskDefImageTag:
    Value: !GetAtt ECSTaskInfo.Tag

  ECSTaskDefImage:
    Value: !GetAtt ECSTaskInfo.Image

  # Tag:
  #   Value: !Ref Tag

  # CanaryTag:
  #   Value: !Ref CanaryTag

  PublicZoneA:
    Value:
      !Ref PublicZoneA
    Description: Public Zone A
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-PublicZoneA
          - StackName: !Ref AWS::StackName
  PublicZoneB:
    Value:
      !Ref PublicZoneB
    Description: Public Zone B
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-PublicZoneB
          - StackName: !Ref AWS::StackName


